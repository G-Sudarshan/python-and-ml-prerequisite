# -*- coding: utf-8 -*-
"""day-2-homework.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sbqG1deY-Aj96In4neFrDcYJyfduM0CP
"""

# list exercises

# count 'fizz' in list
a = ['AAA', 'aaa', 'xyz', 'fizz', 'we', 'fizz', 'sd']
fizz_count = 0;

for i in a:
  if i == 'fizz':
    fizz_count = fizz_count + 1

print("fizz appeared {0} times in list ".format(fizz_count))

# concatinate the strings given in list
s = ""

for word in a:
  s = s + word

print(s)

# common elements from two lists
A = [1,1,2,3,5,4,2,1,67,89,954,34,29]
B = [1,2,3,4,33,21,34,5,0,32,1001,1050,231,12]

print(list(set(A).intersection(B)))

# swap the contents of list
A,B = B, A
print(A)
print(B)

# count no. of strings where string legrh is 2

str_count = 0

for s in a:
  if len(s) == 2:
    str_count = str_count + 1

print("{0} list elements have string length 2".format(str_count))

# program to find gcd and lcm of two numbers


def compute_lcm(x, y):

   # choose the greater number
   if x > y:
       greater = x
   else:
       greater = y

   while(True):
       if((greater % x == 0) and (greater % y == 0)):
           lcm = greater
           break
       greater += 1

   return lcm

def compute_gcd(x, y):

# choose the smaller number
    if x > y:
        smaller = y
    else:
        smaller = x
    for i in range(1, smaller+1):
        if((x % i == 0) and (y % i == 0)):
            gcd = i 
    return gcd

print(compute_lcm(15,18))
print(compute_gcd(15,18))

# dictionary tasks
d = { 0: 10, 1: 20}
d[2] = 30
print(d)

# multiply all values of dictionary
res = 1
for i in d:
  res = res*d[i]

print(res)

# concatenate three dictionaries
d1 = { 1:'a', 2:'b', 3:'c'}
d2 = { 4:'d', 5:'e', 6:'f'}
d3 = { 7:'g', 8:'h', 9:'i'}
d4 = {}

for dx in (d1, d2, d3): 
  d4.update(dx)
print(d4)